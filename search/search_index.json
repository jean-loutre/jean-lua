{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Jean Lua \u00b6 An object-oriented lua toolkit library. For a complete reference of classes included in this library, check usage section","title":"Home"},{"location":"#welcome-to-jean-lua","text":"An object-oriented lua toolkit library. For a complete reference of classes included in this library, check usage section","title":"Welcome to Jean Lua"},{"location":"api/collection/","text":"unknown \u00b6 Classes \u00b6 Collection \u00b6 Methods \u00b6 iter() \u00b6 Get an iterator over collection items Signature function Collection : iter () -> nil Parameter Type Description Default concat() \u00b6 Concatenate the values of this collection Signature function Collection : concat ( delimiter : any ) -> nil Parameter Type Description Default delimiter * any","title":"Api Reference"},{"location":"api/collection/#unknown","text":"","title":"unknown"},{"location":"api/collection/#classes","text":"","title":"Classes"},{"location":"api/collection/#collection","text":"","title":"Collection"},{"location":"api/collection/#methods","text":"","title":"Methods"},{"location":"api/collection/#iter","text":"Get an iterator over collection items Signature function Collection : iter () -> nil Parameter Type Description Default","title":"iter()"},{"location":"api/collection/#concat","text":"Concatenate the values of this collection Signature function Collection : concat ( delimiter : any ) -> nil Parameter Type Description Default delimiter * any","title":"concat()"},{"location":"api/context/","text":"unknown \u00b6","title":"unknown"},{"location":"api/context/#unknown","text":"","title":"unknown"},{"location":"api/iterator/","text":"iterator \u00b6 Iterator , with map / filter functions and the like. Methods \u00b6 init() \u00b6 Signature function iterator : init ( iterator : func (: any ,: any ? ): any ? , invariant : any ? , control : any ? ) -> nil Parameter Type Description Default iterator * func(:any,:any?):any? The iterator function. invariant * any? Invariant state passed to the iterator. control * any? Initial control variable passed to the Notes Can be initialized with a statefull iterator closure, or a stateless iterator iterator. In the later case, invariant and control are the states needed by the stateless iterator. For example, you can call : < a href = '/api/map/#iterator' >< a href = '/api/list/#iterator' > Iterator </ a ></ a > ( ipairs ({ \"some\" , \"list\" })) __call() \u00b6 Return the next element of the iterator. Signature function iterator : __call () -> nil Parameter Type Description Default all() \u00b6 Return true if all elements in the iterator matches the given predicate. Signature function iterator : all ( predicate : any ) -> nil Parameter Type Description Default predicate * any any() \u00b6 Return true if any element in the iterator matches the given predicate. Signature function iterator : any ( predicate : any ) -> nil Parameter Type Description Default predicate * any chain() \u00b6 Chain this iterator with elements of given iterable. Signature function iterator : chain ( iterable : any , ...: any ) -> nil Parameter Type Description Default iterable * any ... * any contains() \u00b6 Return true if any element in the iterator equals the given element Signature function iterator : contains ( item : any ) -> string Parameter Type Description Default item * any The item to check in the iterator Returns Description string True if an element equals the given item, false otherwise. count() \u00b6 Count number of element matching the given predicate. Signature function iterator : count ( predicate : any ) -> nil Parameter Type Description Default predicate * any filter() \u00b6 Return an iterator yielding elements matching the given predicate. Signature function iterator : filter ( predicate : any ) -> nil Parameter Type Description Default predicate * any first() \u00b6 Return the first element in the iterator matching the given predicate. Signature function iterator : first ( predicate : any ) -> nil Parameter Type Description Default predicate * any map() \u00b6 Return a new iterator yielding results of applying a function to all items. Signature function iterator : map ( mapper : any ) -> nil Parameter Type Description Default mapper * any flatten() \u00b6 Returns elements of the nested iterator of an iterator of iterators. Signature function iterator : flatten () -> nil Parameter Type Description Default reduce() \u00b6 Reduce the iterator. Signature function iterator : reduce ( func : any , init : any ) -> nil Parameter Type Description Default func * any init * any skip() \u00b6 Skip the first count elements of an iterator. Signature function iterator : skip ( count : any ) -> nil Parameter Type Description Default count * any take() \u00b6 Return the first elements of an iterator. Signature function iterator : take ( count : any ) -> nil Parameter Type Description Default count * any","title":"iterator"},{"location":"api/iterator/#iterator","text":"Iterator , with map / filter functions and the like.","title":"iterator"},{"location":"api/iterator/#methods","text":"","title":"Methods"},{"location":"api/iterator/#init","text":"Signature function iterator : init ( iterator : func (: any ,: any ? ): any ? , invariant : any ? , control : any ? ) -> nil Parameter Type Description Default iterator * func(:any,:any?):any? The iterator function. invariant * any? Invariant state passed to the iterator. control * any? Initial control variable passed to the Notes Can be initialized with a statefull iterator closure, or a stateless iterator iterator. In the later case, invariant and control are the states needed by the stateless iterator. For example, you can call : < a href = '/api/map/#iterator' >< a href = '/api/list/#iterator' > Iterator </ a ></ a > ( ipairs ({ \"some\" , \"list\" }))","title":"init()"},{"location":"api/iterator/#__call","text":"Return the next element of the iterator. Signature function iterator : __call () -> nil Parameter Type Description Default","title":"__call()"},{"location":"api/iterator/#all","text":"Return true if all elements in the iterator matches the given predicate. Signature function iterator : all ( predicate : any ) -> nil Parameter Type Description Default predicate * any","title":"all()"},{"location":"api/iterator/#any","text":"Return true if any element in the iterator matches the given predicate. Signature function iterator : any ( predicate : any ) -> nil Parameter Type Description Default predicate * any","title":"any()"},{"location":"api/iterator/#chain","text":"Chain this iterator with elements of given iterable. Signature function iterator : chain ( iterable : any , ...: any ) -> nil Parameter Type Description Default iterable * any ... * any","title":"chain()"},{"location":"api/iterator/#contains","text":"Return true if any element in the iterator equals the given element Signature function iterator : contains ( item : any ) -> string Parameter Type Description Default item * any The item to check in the iterator Returns Description string True if an element equals the given item, false otherwise.","title":"contains()"},{"location":"api/iterator/#count","text":"Count number of element matching the given predicate. Signature function iterator : count ( predicate : any ) -> nil Parameter Type Description Default predicate * any","title":"count()"},{"location":"api/iterator/#filter","text":"Return an iterator yielding elements matching the given predicate. Signature function iterator : filter ( predicate : any ) -> nil Parameter Type Description Default predicate * any","title":"filter()"},{"location":"api/iterator/#first","text":"Return the first element in the iterator matching the given predicate. Signature function iterator : first ( predicate : any ) -> nil Parameter Type Description Default predicate * any","title":"first()"},{"location":"api/iterator/#map","text":"Return a new iterator yielding results of applying a function to all items. Signature function iterator : map ( mapper : any ) -> nil Parameter Type Description Default mapper * any","title":"map()"},{"location":"api/iterator/#flatten","text":"Returns elements of the nested iterator of an iterator of iterators. Signature function iterator : flatten () -> nil Parameter Type Description Default","title":"flatten()"},{"location":"api/iterator/#reduce","text":"Reduce the iterator. Signature function iterator : reduce ( func : any , init : any ) -> nil Parameter Type Description Default func * any init * any","title":"reduce()"},{"location":"api/iterator/#skip","text":"Skip the first count elements of an iterator. Signature function iterator : skip ( count : any ) -> nil Parameter Type Description Default count * any","title":"skip()"},{"location":"api/iterator/#take","text":"Return the first elements of an iterator. Signature function iterator : take ( count : any ) -> nil Parameter Type Description Default count * any","title":"take()"},{"location":"api/list/","text":"jlua.List \u00b6 A list of items, with random access. Classes \u00b6 List \u00b6 Methods \u00b6 init() \u00b6 Initialize a list from a table Signature function List : init (...: A ) -> nil Parameter Type Description Default ... * A table, or anything that can be passed to Iterator.iter(...) push() \u00b6 Add an item into the list Signature function List : push ( item : any ) -> nil Parameter Type Description Default item * any pop() \u00b6 Remove the item at the end of the list Signature function List : pop () -> nil Parameter Type Description Default remove() \u00b6 Remove the first occurence of an item from the list Signature function List : remove ( item : any ) -> nil Parameter Type Description Default item * any sort() \u00b6 Sort the list Signature function List : sort ( predicate : any ) -> nil Parameter Type Description Default predicate * any slice() \u00b6 Return a iterator over a slice of this list Signature function List : slice ( start : any , end_ : any ) -> nil Parameter Type Description Default start * any end_ * any reverse() \u00b6 Return a iterator on element of the list, in the reverse order Signature function List : reverse () -> nil Parameter Type Description Default __iter() \u00b6 Signature function List : __iter () -> nil Parameter Type Description Default Iterator \u00b6 Methods \u00b6 to_list() \u00b6 Create a list containing all elements of the iterator. Signature function Iterator : to_list () -> nil Parameter Type Description Default","title":"jlua.List"},{"location":"api/list/#jlualist","text":"A list of items, with random access.","title":"jlua.List"},{"location":"api/list/#classes","text":"","title":"Classes"},{"location":"api/list/#list","text":"","title":"List"},{"location":"api/list/#methods","text":"","title":"Methods"},{"location":"api/list/#init","text":"Initialize a list from a table Signature function List : init (...: A ) -> nil Parameter Type Description Default ... * A table, or anything that can be passed to Iterator.iter(...)","title":"init()"},{"location":"api/list/#push","text":"Add an item into the list Signature function List : push ( item : any ) -> nil Parameter Type Description Default item * any","title":"push()"},{"location":"api/list/#pop","text":"Remove the item at the end of the list Signature function List : pop () -> nil Parameter Type Description Default","title":"pop()"},{"location":"api/list/#remove","text":"Remove the first occurence of an item from the list Signature function List : remove ( item : any ) -> nil Parameter Type Description Default item * any","title":"remove()"},{"location":"api/list/#sort","text":"Sort the list Signature function List : sort ( predicate : any ) -> nil Parameter Type Description Default predicate * any","title":"sort()"},{"location":"api/list/#slice","text":"Return a iterator over a slice of this list Signature function List : slice ( start : any , end_ : any ) -> nil Parameter Type Description Default start * any end_ * any","title":"slice()"},{"location":"api/list/#reverse","text":"Return a iterator on element of the list, in the reverse order Signature function List : reverse () -> nil Parameter Type Description Default","title":"reverse()"},{"location":"api/list/#__iter","text":"Signature function List : __iter () -> nil Parameter Type Description Default","title":"__iter()"},{"location":"api/list/#iterator","text":"","title":"Iterator"},{"location":"api/list/#methods_1","text":"","title":"Methods"},{"location":"api/list/#to_list","text":"Create a list containing all elements of the iterator. Signature function Iterator : to_list () -> nil Parameter Type Description Default","title":"to_list()"},{"location":"api/logging/","text":"jlua.logging \u00b6 Hierarchical logging facility. This module is heavily inspired from Python's logging facility. Enums \u00b6 LOG_LEVEL \u00b6 Logging level for messages & filters. Can be used to set the level of a message when calling log . Message emmited can then be filtered by using this enum. Member Description DEBUG Verbose diagnostics. INFO Important informations to show to the user. WARNING Handled errors. ERROR Recoverable errors. CRITICAL Failures. Methods \u00b6 get_logger() \u00b6 Get a Logger instance. Signature function get_logger ( name : string ) -> Logger Parameter Type Description Default name * string The name of the logger. Returns Description Logger Logger instance. Notes If a logger with the given name already exists, will return the same instance. Separate the level of hierarchy with dots. i.e if you create a logger named \"jean.jacques\", all messages logged to it will be forwarded to the logger named \"jean\". Classes \u00b6 LogRecord \u00b6 A log record, emitted on the Logger hierarchy. Properties \u00b6 Name Type Access Description logger string read-only The name of the logger this record is originating from. level LOG_LEVEL read-only The level of the record. format string read-only String format passed to the log method. args table read-only Format arguments passed to the log method. Logger \u00b6 A logger, allowing to emit log message. To create a new logger, use get_logger , this class isn't meant to be contsructed directly. Methods \u00b6 add_handler() \u00b6 Add a log handler to this logger. Signature function Logger : add_handler ( handler : function ( LogRecord )) -> nil Parameter Type Description Default handler * function( LogRecord ) The handler to add. Notes Add an handler to this logger. It will be called for every log record that is emitted by this logger or one of it's child, and that passes the log filters. If a handler is added multiple times, it will be called multiple times when a LogRecord is emitted. Usage logger = get_logger ( _REQUIRED_NAME ) local function print_log ( record ) print ( format ( record . format , record . args )) end logger : add_handler ( print_log ) remove_handler() \u00b6 Remove a previously added handle of this logger. Signature function Logger : remove_handler ( handler : function ( LogRecord ): nil ) -> nil Parameter Type Description Default handler * function( LogRecord ):nil The handler to remove. Notes If the hanlder was added multiple times, remove only the first occurence. log() \u00b6 Emmit a log message on this handler. Signature function Logger : log ( log_level : LOG_LEVEL , fmt : string ) -> nil Parameter Type Description Default log_level * LOG_LEVEL The log level of the log entry. fmt * string The format string for the message of the log entry. Notes Create a LogRecord from the given arguments, emit the LogRecord on parents of this logger, and call the handlers registered on this logger if the record passes the filter. Usage logger = get_logger ( _REQUIRED_NAME ) ... logger : log ( LOG_LEVEL . ERROR , \"An error occured\" ) debug() \u00b6 Emmit a debug log message on this logger. Signature function Logger : debug ( string : fmt ) -> nil Parameter Type Description Default string * fmt The format string for the message of the log Notes Will forward call to log with level set to LOG_LEVEL.DEBUG . info() \u00b6 Emmit an info log message on this logger. Signature function Logger : info ( string : fmt ) -> nil Parameter Type Description Default string * fmt The format string for the message of the log Notes Will forward call to log with level set to LOG_LEVEL.INFO . warning() \u00b6 Emmit a warning log message on this logger. Signature function Logger : warning ( string : fmt ) -> nil Parameter Type Description Default string * fmt The format string for the message of the log Notes Will forward call to log with level set to LOG_LEVEL.WARNING . error() \u00b6 Emmit an error log message on this logger. Signature function Logger : error ( string : fmt ) -> nil Parameter Type Description Default string * fmt The format string for the message of the log Notes Will forward call to log with level set to LOG_LEVEL.ERROR . critical() \u00b6 Emmit a critical log message on this logger. Signature function Logger : critical ( string : fmt ) -> nil Parameter Type Description Default string * fmt The format string for the message of the log Notes Will forward call to log with level set to LOG_LEVEL.CRITICAL .","title":"jlua.logging"},{"location":"api/logging/#jlualogging","text":"Hierarchical logging facility. This module is heavily inspired from Python's logging facility.","title":"jlua.logging"},{"location":"api/logging/#enums","text":"","title":"Enums"},{"location":"api/logging/#log_level","text":"Logging level for messages & filters. Can be used to set the level of a message when calling log . Message emmited can then be filtered by using this enum. Member Description DEBUG Verbose diagnostics. INFO Important informations to show to the user. WARNING Handled errors. ERROR Recoverable errors. CRITICAL Failures.","title":"LOG_LEVEL"},{"location":"api/logging/#methods","text":"","title":"Methods"},{"location":"api/logging/#get_logger","text":"Get a Logger instance. Signature function get_logger ( name : string ) -> Logger Parameter Type Description Default name * string The name of the logger. Returns Description Logger Logger instance. Notes If a logger with the given name already exists, will return the same instance. Separate the level of hierarchy with dots. i.e if you create a logger named \"jean.jacques\", all messages logged to it will be forwarded to the logger named \"jean\".","title":"get_logger()"},{"location":"api/logging/#classes","text":"","title":"Classes"},{"location":"api/logging/#logrecord","text":"A log record, emitted on the Logger hierarchy.","title":"LogRecord"},{"location":"api/logging/#properties","text":"Name Type Access Description logger string read-only The name of the logger this record is originating from. level LOG_LEVEL read-only The level of the record. format string read-only String format passed to the log method. args table read-only Format arguments passed to the log method.","title":"Properties"},{"location":"api/logging/#logger","text":"A logger, allowing to emit log message. To create a new logger, use get_logger , this class isn't meant to be contsructed directly.","title":"Logger"},{"location":"api/logging/#methods_1","text":"","title":"Methods"},{"location":"api/logging/#add_handler","text":"Add a log handler to this logger. Signature function Logger : add_handler ( handler : function ( LogRecord )) -> nil Parameter Type Description Default handler * function( LogRecord ) The handler to add. Notes Add an handler to this logger. It will be called for every log record that is emitted by this logger or one of it's child, and that passes the log filters. If a handler is added multiple times, it will be called multiple times when a LogRecord is emitted. Usage logger = get_logger ( _REQUIRED_NAME ) local function print_log ( record ) print ( format ( record . format , record . args )) end logger : add_handler ( print_log )","title":"add_handler()"},{"location":"api/logging/#remove_handler","text":"Remove a previously added handle of this logger. Signature function Logger : remove_handler ( handler : function ( LogRecord ): nil ) -> nil Parameter Type Description Default handler * function( LogRecord ):nil The handler to remove. Notes If the hanlder was added multiple times, remove only the first occurence.","title":"remove_handler()"},{"location":"api/logging/#log","text":"Emmit a log message on this handler. Signature function Logger : log ( log_level : LOG_LEVEL , fmt : string ) -> nil Parameter Type Description Default log_level * LOG_LEVEL The log level of the log entry. fmt * string The format string for the message of the log entry. Notes Create a LogRecord from the given arguments, emit the LogRecord on parents of this logger, and call the handlers registered on this logger if the record passes the filter. Usage logger = get_logger ( _REQUIRED_NAME ) ... logger : log ( LOG_LEVEL . ERROR , \"An error occured\" )","title":"log()"},{"location":"api/logging/#debug","text":"Emmit a debug log message on this logger. Signature function Logger : debug ( string : fmt ) -> nil Parameter Type Description Default string * fmt The format string for the message of the log Notes Will forward call to log with level set to LOG_LEVEL.DEBUG .","title":"debug()"},{"location":"api/logging/#info","text":"Emmit an info log message on this logger. Signature function Logger : info ( string : fmt ) -> nil Parameter Type Description Default string * fmt The format string for the message of the log Notes Will forward call to log with level set to LOG_LEVEL.INFO .","title":"info()"},{"location":"api/logging/#warning","text":"Emmit a warning log message on this logger. Signature function Logger : warning ( string : fmt ) -> nil Parameter Type Description Default string * fmt The format string for the message of the log Notes Will forward call to log with level set to LOG_LEVEL.WARNING .","title":"warning()"},{"location":"api/logging/#error","text":"Emmit an error log message on this logger. Signature function Logger : error ( string : fmt ) -> nil Parameter Type Description Default string * fmt The format string for the message of the log Notes Will forward call to log with level set to LOG_LEVEL.ERROR .","title":"error()"},{"location":"api/logging/#critical","text":"Emmit a critical log message on this logger. Signature function Logger : critical ( string : fmt ) -> nil Parameter Type Description Default string * fmt The format string for the message of the log Notes Will forward call to log with level set to LOG_LEVEL.CRITICAL .","title":"critical()"},{"location":"api/map/","text":"unknown \u00b6 Classes \u00b6 Map \u00b6 Methods \u00b6 init() \u00b6 Initialize a map from lua table Signature function Map : init (...: any ) -> nil Parameter Type Description Default ... * any __iter() \u00b6 Return a jlua.pair_iterator over the element of the collection Signature function Map : __iter () -> nil Parameter Type Description Default deep_update() \u00b6 Update values in this map with given values, recursively. Signature function Map : deep_update (...: any ) -> nil Parameter Type Description Default ... * any merge() \u00b6 Create a new map with values of self updated with values of given map. Signature function Map : merge (...: any ) -> nil Parameter Type Description Default ... * any pop() \u00b6 Get a value and removes it from the map. Signature function Map : pop ( key : any , default_value : any ) -> nil Parameter Type Description Default key * any default_value * any to_raw() \u00b6 Return a raw table containing the content of the map. Signature function Map : to_raw () -> nil Parameter Type Description Default update() \u00b6 Update values in this map with given values. Signature function Map : update (...: any ) -> nil Parameter Type Description Default ... * any Iterator \u00b6 Methods \u00b6 to_map() \u00b6 Return a map containing elements of this iterator Signature function Iterator : to_map ( key_getter : any ) -> nil Parameter Type Description Default key_getter * any","title":"unknown"},{"location":"api/map/#unknown","text":"","title":"unknown"},{"location":"api/map/#classes","text":"","title":"Classes"},{"location":"api/map/#map","text":"","title":"Map"},{"location":"api/map/#methods","text":"","title":"Methods"},{"location":"api/map/#init","text":"Initialize a map from lua table Signature function Map : init (...: any ) -> nil Parameter Type Description Default ... * any","title":"init()"},{"location":"api/map/#__iter","text":"Return a jlua.pair_iterator over the element of the collection Signature function Map : __iter () -> nil Parameter Type Description Default","title":"__iter()"},{"location":"api/map/#deep_update","text":"Update values in this map with given values, recursively. Signature function Map : deep_update (...: any ) -> nil Parameter Type Description Default ... * any","title":"deep_update()"},{"location":"api/map/#merge","text":"Create a new map with values of self updated with values of given map. Signature function Map : merge (...: any ) -> nil Parameter Type Description Default ... * any","title":"merge()"},{"location":"api/map/#pop","text":"Get a value and removes it from the map. Signature function Map : pop ( key : any , default_value : any ) -> nil Parameter Type Description Default key * any default_value * any","title":"pop()"},{"location":"api/map/#to_raw","text":"Return a raw table containing the content of the map. Signature function Map : to_raw () -> nil Parameter Type Description Default","title":"to_raw()"},{"location":"api/map/#update","text":"Update values in this map with given values. Signature function Map : update (...: any ) -> nil Parameter Type Description Default ... * any","title":"update()"},{"location":"api/map/#iterator","text":"","title":"Iterator"},{"location":"api/map/#methods_1","text":"","title":"Methods"},{"location":"api/map/#to_map","text":"Return a map containing elements of this iterator Signature function Iterator : to_map ( key_getter : any ) -> nil Parameter Type Description Default key_getter * any","title":"to_map()"},{"location":"api/object/","text":"unknown \u00b6 Classes \u00b6 Class \u00b6 Base class for class model Metatable for classes Methods \u00b6 __index() \u00b6 Signature function Class : __index ( key : any ) -> nil Parameter Type Description Default key * any __newindex() \u00b6 Signature function Class : __newindex ( key : any , value : any ) -> nil Parameter Type Description Default key * any value * any __call() \u00b6 Class \"constructor\", creating a new object. Signature function Class : __call (...: any ) -> nil Parameter Type Description Default ... * any extend() \u00b6 Create a new child class of this class. Signature function Class : extend ( name : any ) -> nil Parameter Type Description Default name * any is_class_of() \u00b6 Return true if the given object is an instance of this class. Signature function Class : is_class_of ( object : any ) -> nil Parameter Type Description Default object * any wrap() \u00b6 Create an instance of this class by setting it's metatable. Signature function Class : wrap ( object : any ) -> nil Parameter Type Description Default object * any PropertyGuard \u00b6 Methods \u00b6 __newindex() \u00b6 Signature function PropertyGuard : __newindex ( key : any , value : any ) -> nil Parameter Type Description Default key * any value * any PropertiesGuard \u00b6 Methods \u00b6 __index() \u00b6 Signature function PropertiesGuard : __index ( key : any ) -> nil Parameter Type Description Default key * any __newindex() \u00b6 Signature function PropertiesGuard : __newindex ( key : any , value : any ) -> nil Parameter Type Description Default key * any value * any","title":"unknown"},{"location":"api/object/#unknown","text":"","title":"unknown"},{"location":"api/object/#classes","text":"","title":"Classes"},{"location":"api/object/#class","text":"Base class for class model Metatable for classes","title":"Class"},{"location":"api/object/#methods","text":"","title":"Methods"},{"location":"api/object/#__index","text":"Signature function Class : __index ( key : any ) -> nil Parameter Type Description Default key * any","title":"__index()"},{"location":"api/object/#__newindex","text":"Signature function Class : __newindex ( key : any , value : any ) -> nil Parameter Type Description Default key * any value * any","title":"__newindex()"},{"location":"api/object/#__call","text":"Class \"constructor\", creating a new object. Signature function Class : __call (...: any ) -> nil Parameter Type Description Default ... * any","title":"__call()"},{"location":"api/object/#extend","text":"Create a new child class of this class. Signature function Class : extend ( name : any ) -> nil Parameter Type Description Default name * any","title":"extend()"},{"location":"api/object/#is_class_of","text":"Return true if the given object is an instance of this class. Signature function Class : is_class_of ( object : any ) -> nil Parameter Type Description Default object * any","title":"is_class_of()"},{"location":"api/object/#wrap","text":"Create an instance of this class by setting it's metatable. Signature function Class : wrap ( object : any ) -> nil Parameter Type Description Default object * any","title":"wrap()"},{"location":"api/object/#propertyguard","text":"","title":"PropertyGuard"},{"location":"api/object/#methods_1","text":"","title":"Methods"},{"location":"api/object/#__newindex_1","text":"Signature function PropertyGuard : __newindex ( key : any , value : any ) -> nil Parameter Type Description Default key * any value * any","title":"__newindex()"},{"location":"api/object/#propertiesguard","text":"","title":"PropertiesGuard"},{"location":"api/object/#methods_2","text":"","title":"Methods"},{"location":"api/object/#__index_1","text":"Signature function PropertiesGuard : __index ( key : any ) -> nil Parameter Type Description Default key * any","title":"__index()"},{"location":"api/object/#__newindex_2","text":"Signature function PropertiesGuard : __newindex ( key : any , value : any ) -> nil Parameter Type Description Default key * any value * any","title":"__newindex()"},{"location":"api/path/","text":"unknown \u00b6 Classes \u00b6 Path \u00b6 Methods \u00b6 init() \u00b6 Initialize a path Signature function Path : init ( source : any ) -> nil Parameter Type Description Default source * any __div() \u00b6 Concatenate two paths. Signature function Path : __div ( right : any ) -> nil Parameter Type Description Default right * any __tostring() \u00b6 Returns the string representation of this path Signature function Path : __tostring () -> nil Parameter Type Description Default open() \u00b6 Open the file this path points to. Signature function Path : open ( mode : any ) -> nil Parameter Type Description Default mode * any relative_to() \u00b6 Get the current path relative to given path. Signature function Path : relative_to ( right : any ) -> nil Parameter Type Description Default right * any is_child_of() \u00b6 Return true if this path is a child of the given path Signature function Path : is_child_of ( parent : any ) -> nil Parameter Type Description Default parent * any","title":"unknown"},{"location":"api/path/#unknown","text":"","title":"unknown"},{"location":"api/path/#classes","text":"","title":"Classes"},{"location":"api/path/#path","text":"","title":"Path"},{"location":"api/path/#methods","text":"","title":"Methods"},{"location":"api/path/#init","text":"Initialize a path Signature function Path : init ( source : any ) -> nil Parameter Type Description Default source * any","title":"init()"},{"location":"api/path/#__div","text":"Concatenate two paths. Signature function Path : __div ( right : any ) -> nil Parameter Type Description Default right * any","title":"__div()"},{"location":"api/path/#__tostring","text":"Returns the string representation of this path Signature function Path : __tostring () -> nil Parameter Type Description Default","title":"__tostring()"},{"location":"api/path/#open","text":"Open the file this path points to. Signature function Path : open ( mode : any ) -> nil Parameter Type Description Default mode * any","title":"open()"},{"location":"api/path/#relative_to","text":"Get the current path relative to given path. Signature function Path : relative_to ( right : any ) -> nil Parameter Type Description Default right * any","title":"relative_to()"},{"location":"api/path/#is_child_of","text":"Return true if this path is a child of the given path Signature function Path : is_child_of ( parent : any ) -> nil Parameter Type Description Default parent * any","title":"is_child_of()"},{"location":"api/string/","text":"jlua.string \u00b6 String utilities. This module contains various helpers related to string. The metatable of string isn't replaced, meaning all methods declared here have to be called explicitely. Methods \u00b6 format() \u00b6 Extended string format. Signature function format ( fmt : string , ...: any ) -> string Parameter Type Description Default fmt * string String format. ... * any Format arguments. Returns Description string Formatted string. Notes Replacement fields in the format string are delimited with braces {}. Each replacement field can contains either a name of a a keyword argument, the index of a positionnal arguments or nothing. Each time a replacement field with no name or index is provided, the next format argument is taken. Field format can be sepcified after a colon : in a replacement field. This format is passed to the lua format function, thus the format for C function printf applies. To escape braces, simply double them. Usage jlua . string . format ( \"{} is an {species} called {0}\" , \"Jean-Paul\" , { species = \"otter\" }) -- Jean-Paul is an otter called Jean-Paul format ( \"{} is {:.2f} years old\" , \"Jean-Paul\" , 24.2342 ) -- Jean-Paul is 24.23 years old format ( \"{name} is {age:.2f} years old\" , { name = \"Jean-Paul\" , age = 24.2342 }) -- Jean-Paul is 24.23 years old","title":"jlua.string"},{"location":"api/string/#jluastring","text":"String utilities. This module contains various helpers related to string. The metatable of string isn't replaced, meaning all methods declared here have to be called explicitely.","title":"jlua.string"},{"location":"api/string/#methods","text":"","title":"Methods"},{"location":"api/string/#format","text":"Extended string format. Signature function format ( fmt : string , ...: any ) -> string Parameter Type Description Default fmt * string String format. ... * any Format arguments. Returns Description string Formatted string. Notes Replacement fields in the format string are delimited with braces {}. Each replacement field can contains either a name of a a keyword argument, the index of a positionnal arguments or nothing. Each time a replacement field with no name or index is provided, the next format argument is taken. Field format can be sepcified after a colon : in a replacement field. This format is passed to the lua format function, thus the format for C function printf applies. To escape braces, simply double them. Usage jlua . string . format ( \"{} is an {species} called {0}\" , \"Jean-Paul\" , { species = \"otter\" }) -- Jean-Paul is an otter called Jean-Paul format ( \"{} is {:.2f} years old\" , \"Jean-Paul\" , 24.2342 ) -- Jean-Paul is 24.23 years old format ( \"{name} is {age:.2f} years old\" , { name = \"Jean-Paul\" , age = 24.2342 }) -- Jean-Paul is 24.23 years old","title":"format()"},{"location":"api/type/","text":"unknown \u00b6","title":"unknown"},{"location":"api/type/#unknown","text":"","title":"unknown"},{"location":"api/test/call/","text":"unknown \u00b6 Classes \u00b6 Call \u00b6 Methods \u00b6 init() \u00b6 Initialize the call Signature function Call : init (...: any ) -> nil Parameter Type Description Default ... * any __eq() \u00b6 Check if this call matches the given one. Signature function Call : __eq ( right : any ) -> nil Parameter Type Description Default right * any","title":"Test"},{"location":"api/test/call/#unknown","text":"","title":"unknown"},{"location":"api/test/call/#classes","text":"","title":"Classes"},{"location":"api/test/call/#call","text":"","title":"Call"},{"location":"api/test/call/#methods","text":"","title":"Methods"},{"location":"api/test/call/#init","text":"Initialize the call Signature function Call : init (...: any ) -> nil Parameter Type Description Default ... * any","title":"init()"},{"location":"api/test/call/#__eq","text":"Check if this call matches the given one. Signature function Call : __eq ( right : any ) -> nil Parameter Type Description Default right * any","title":"__eq()"},{"location":"api/test/mock/","text":"unknown \u00b6 Classes \u00b6 Mock \u00b6 Methods \u00b6 init() \u00b6 Initialize the mock Signature function Mock : init ( args : any ) -> nil Parameter Type Description Default args * any __call() \u00b6 Call metamethod Signature function Mock : __call (...: any ) -> nil Parameter Type Description Default ... * any __index() \u00b6 Indexing metamethod Signature function Mock : __index ( key : any ) -> nil Parameter Type Description Default key * any as_function() \u00b6 Get a closure calling that mock. Signature function Mock : as_function () -> nil Parameter Type Description Default reset() \u00b6 Reset the call list for that mock Signature function Mock : reset () -> nil Parameter Type Description Default","title":"unknown"},{"location":"api/test/mock/#unknown","text":"","title":"unknown"},{"location":"api/test/mock/#classes","text":"","title":"Classes"},{"location":"api/test/mock/#mock","text":"","title":"Mock"},{"location":"api/test/mock/#methods","text":"","title":"Methods"},{"location":"api/test/mock/#init","text":"Initialize the mock Signature function Mock : init ( args : any ) -> nil Parameter Type Description Default args * any","title":"init()"},{"location":"api/test/mock/#__call","text":"Call metamethod Signature function Mock : __call (...: any ) -> nil Parameter Type Description Default ... * any","title":"__call()"},{"location":"api/test/mock/#__index","text":"Indexing metamethod Signature function Mock : __index ( key : any ) -> nil Parameter Type Description Default key * any","title":"__index()"},{"location":"api/test/mock/#as_function","text":"Get a closure calling that mock. Signature function Mock : as_function () -> nil Parameter Type Description Default","title":"as_function()"},{"location":"api/test/mock/#reset","text":"Reset the call list for that mock Signature function Mock : reset () -> nil Parameter Type Description Default","title":"reset()"},{"location":"usage/_index/","text":"Usage \u00b6 Here is the documentation of the jean-lua API.","title":"Usage"},{"location":"usage/_index/#usage","text":"Here is the documentation of the jean-lua API.","title":"Usage"},{"location":"usage/functional/","text":"Functional \u00b6 Functional programming involves iterators and function objects.","title":"Functional"},{"location":"usage/functional/#functional","text":"Functional programming involves iterators and function objects.","title":"Functional"},{"location":"usage/object/","text":"Object \u00b6 The jlua.object module contains definition of an Object class, that can be extended to create new classes. It supports single inheritance, methods, properties with getters and setters and metamethod overriding, including __index and __newindex. Defining a new class \u00b6 A new class can be created by extending from another one. Derived class will inherit the methods, metamethods and properties of it's parent. If your class has no base class, extend the Object class. local Object = require ( \"jlua.object\" ) local Otter = Object : extend () local SpaceOtter = Otter : extend () Constructors \u00b6 Objects are constructed by calling the class. You can give arguments to the constructor, they will be forwarded to the init method of the class, if it's defined. local Object = require ( \"jlua.object\" ) local Otter = Object : extend () function Otter : init ( name ) print ( \"My name is \" .. name ) end local peter = Otter ( \"Peter\" ) -- -> \"My name is Peter\" Warning If you override a base class init method, don't forget to call the parent init method by calling self:super(\"init\", ...) . Methods \u00b6 Method Definition \u00b6 Methods can be defined either by adding them on the class metatable before calling the extend() method, or afterwards, by defining them on the class, like you do on regular lua tables : local Object = require ( \"jlua.object\" ) local Otter = Object : extend ({ name = function () return \"Peter\" end }) function Otter : last_name () return \"Otterson\" end Warning Defining twice the same method will assert. This is done to prevent unwanted method overwrites. If you really need to overwrite a method, you can do it by using rawset like this: rawset(Otter._definition._metatable, \"last_name\", function() [...] end) Calling Parent Methods \u00b6 To call a parent method in a child class, use the super() method defined on classes instances, with the method name as the first argument, arguments to forward to the parent method next : local Object = require ( \"jlua.object\" ) local Otter = Object : extend () function Otter : throw ( distance ) return \"throwing otter at \" .. distance .. \"m\" end local SpaceOtter = Otter : extend () local SpaceOtter : throw ( distance ) self : super ( \"throw\" , distance + 100 ) end local peter = SpaceOtter () peter : throw_at ( 33 ) -- -> Throwing otter at 133m Properties \u00b6 Properties are defined using the \"properties\" field of classes, accessing the wanted property on it and defining a get or a set method : local Object = require ( \"jlua.object\" ) local Otter = Object : extend () function Otter : init () self . _age = 10 end function Otter . properties . age : get () -- Notice the colon before get() return self . _age end function Otter . properties . age : set ( value ) -- Notice the colon before set() self . _age = value end local peter = Otter () print ( peter . age ) -- 10 peter . age = 40 print ( peter . age ) -- 40 You can define properties with only a getter, or only a setter. You can define a property with no getter nor setter, but in this case it will only be defined in your head and will have no effect on the running program. Warning Setting a property with no setter defined, or getting a property with no getter will raise an error at runtime. There is no default behavior for getters / setters once one of them is defined. Warning Redefining a getter or a setter that was already defined on a property will raise an error. Same as for methods, this was made to prevent erroneous method overwriting.","title":"Object"},{"location":"usage/object/#object","text":"The jlua.object module contains definition of an Object class, that can be extended to create new classes. It supports single inheritance, methods, properties with getters and setters and metamethod overriding, including __index and __newindex.","title":"Object"},{"location":"usage/object/#defining-a-new-class","text":"A new class can be created by extending from another one. Derived class will inherit the methods, metamethods and properties of it's parent. If your class has no base class, extend the Object class. local Object = require ( \"jlua.object\" ) local Otter = Object : extend () local SpaceOtter = Otter : extend ()","title":"Defining a new class"},{"location":"usage/object/#constructors","text":"Objects are constructed by calling the class. You can give arguments to the constructor, they will be forwarded to the init method of the class, if it's defined. local Object = require ( \"jlua.object\" ) local Otter = Object : extend () function Otter : init ( name ) print ( \"My name is \" .. name ) end local peter = Otter ( \"Peter\" ) -- -> \"My name is Peter\" Warning If you override a base class init method, don't forget to call the parent init method by calling self:super(\"init\", ...) .","title":"Constructors"},{"location":"usage/object/#methods","text":"","title":"Methods"},{"location":"usage/object/#method-definition","text":"Methods can be defined either by adding them on the class metatable before calling the extend() method, or afterwards, by defining them on the class, like you do on regular lua tables : local Object = require ( \"jlua.object\" ) local Otter = Object : extend ({ name = function () return \"Peter\" end }) function Otter : last_name () return \"Otterson\" end Warning Defining twice the same method will assert. This is done to prevent unwanted method overwrites. If you really need to overwrite a method, you can do it by using rawset like this: rawset(Otter._definition._metatable, \"last_name\", function() [...] end)","title":"Method Definition"},{"location":"usage/object/#calling-parent-methods","text":"To call a parent method in a child class, use the super() method defined on classes instances, with the method name as the first argument, arguments to forward to the parent method next : local Object = require ( \"jlua.object\" ) local Otter = Object : extend () function Otter : throw ( distance ) return \"throwing otter at \" .. distance .. \"m\" end local SpaceOtter = Otter : extend () local SpaceOtter : throw ( distance ) self : super ( \"throw\" , distance + 100 ) end local peter = SpaceOtter () peter : throw_at ( 33 ) -- -> Throwing otter at 133m","title":"Calling Parent Methods"},{"location":"usage/object/#properties","text":"Properties are defined using the \"properties\" field of classes, accessing the wanted property on it and defining a get or a set method : local Object = require ( \"jlua.object\" ) local Otter = Object : extend () function Otter : init () self . _age = 10 end function Otter . properties . age : get () -- Notice the colon before get() return self . _age end function Otter . properties . age : set ( value ) -- Notice the colon before set() self . _age = value end local peter = Otter () print ( peter . age ) -- 10 peter . age = 40 print ( peter . age ) -- 40 You can define properties with only a getter, or only a setter. You can define a property with no getter nor setter, but in this case it will only be defined in your head and will have no effect on the running program. Warning Setting a property with no setter defined, or getting a property with no getter will raise an error at runtime. There is no default behavior for getters / setters once one of them is defined. Warning Redefining a getter or a setter that was already defined on a property will raise an error. Same as for methods, this was made to prevent erroneous method overwriting.","title":"Properties"}]}